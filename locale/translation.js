// Translation document for the collection
// =======================================
// This FIe contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO FIe with Poedit
// 2. Go to "Catalog > Properties > Sources paths"
// 3. Add the locale/translation.js FIe
// 4. Press "Update" to update from sources

gettext('Input');
gettext('Teclado');
gettext('Teclado_2_presionada');
gettext('Informa cuando se presionó la tecla 2');
gettext('Teclado_1_presionada');
gettext('Informa cuando se presionó la tecla 1');
gettext('Teclado_↓_estado_ext');
gettext('Informa el estado de la tecla ↓');
gettext('Teclado_7_presionada');
gettext('Informa cuando se presionó la tecla 7');
gettext('Teclado_4_presionada');
gettext('Informa cuando se presionó la tecla 4');
gettext('Teclado_1_estado');
gettext('Informa el estado de la tecla 1');
gettext('Teclado_9_presionada');
gettext('Informa cuando se presionó la tecla 9');
gettext('Teclado_→_estado_ext');
gettext('Informa el estado de la tecla →');
gettext('Teclado_4_estado');
gettext('Informa el estado de la tecla 4');
gettext('Teclado_2_estado');
gettext('Informa el estado de la tecla 2');
gettext('Teclado_8_estado');
gettext('Informa el estado de la tecla 8');
gettext('Teclado_8_presionada');
gettext('Informa cuando se presionó la tecla 8');
gettext('Teclado_←_estado_ext');
gettext('Informa el estado de la tecla ←');
gettext('Teclado_5_estado');
gettext('Informa el estado de la tecla 5');
gettext('Teclado_3_estado');
gettext('Informa el estado de la tecla 3');
gettext('Teclado_base');
gettext('Bloque básico para decodificar key up y extendidos');
gettext('Procesamos los valores\nsin error.');
gettext('F0 es el código que indica que estamos soltando una tecla.\nEsta primer parte del circuito detecta el F0 y lo memoriza \npara indicar que el próximo valor es soltar y no presionar.');
gettext('E0 es el código de tecla extendida.\nCuando se suelta una tecla extendida recibimos E0,F0,tecla.\nEs por esta razón que la memoria de código extendido ignora\nal F0 que puede aparecer entre E0 y la tecla (la AND)');
gettext('Esta AND ignora los códigos\nE0 y F0 que los informamos\npor separado.');
gettext('En este registro memorizamos\nla última tecla.\nLos E0 y F0 no se almacenan.');
gettext('La señal que indica que\nrecibimos una nueva\ntecla debe acompañar\nal valor del registro.\nEs decir que se demora\nun ciclo.');
gettext('Teclado_6_estado');
gettext('Informa el estado de la tecla 6');
gettext('Teclado_0_estado');
gettext('Informa el estado de la tecla 0');
gettext('Teclado_6_presionada');
gettext('Informa cuando se presionó la tecla 6');
gettext('Teclado_7_estado');
gettext('Informa el estado de la tecla 7');
gettext('Teclado_3_presionada');
gettext('Informa cuando se presionó la tecla 3');
gettext('Teclado_9_estado');
gettext('Informa el estado de la tecla 9');
gettext('Teclado_presionada');
gettext('Indica si se presionó la tecla indicada');
gettext('Teclado_↑_estado_ext');
gettext('Informa el estado de la tecla ↑');
gettext('Teclado_estado_ext');
gettext('Indica el estado de una tecla extendida');
gettext('Teclado_5_presionada');
gettext('Informa cuando se presionó la tecla 5');
gettext('Teclado_estado');
gettext('Indica el estado de una tecla');
gettext('Teclado_0_presionada');
gettext('Informa cuando se presionó la tecla 0');
gettext('CapSense');
gettext('CapSense 2');
gettext('2 capacitive buttons');
gettext('CapSense 3');
gettext('3 capacitive buttons');
gettext('CapSense 4');
gettext('4 capacitive buttons');
gettext('Logic');
gettext('NOT');
gettext('NOT');
gettext('NOT logic gate');
gettext('AND');
gettext('AND_2');
gettext('AND logic gate 2 inputs');
gettext('AND_6');
gettext('AND logic gate 6 inputs');
gettext('AND_4');
gettext('AND logic gate 4 inputs');
gettext('AND_5');
gettext('AND logic gate 5 inputs');
gettext('AND_3');
gettext('AND logic gate 3 inputs');
gettext('AND_8');
gettext('AND logic gate 8 inputs');
gettext('AND_7');
gettext('AND logic gate 7 inputs');
gettext('OR');
gettext('OR_7');
gettext('OR logic gate 7 inputs');
gettext('OR_5');
gettext('OR logic gate 5 inputs');
gettext('OR_3');
gettext('OR logic gate 3 inputs');
gettext('OR_8');
gettext('OR logic gate 8 inputs');
gettext('OR_2');
gettext('OR logic gate 2 inputs');
gettext('OR_6');
gettext('OR logic gate 6 inputs');
gettext('OR_4');
gettext('OR logic gate 4 inputs');
gettext('NOR');
gettext('NOR_5');
gettext('NOR logic gate 5 inputs');
gettext('NOR_4');
gettext('NOR logic gate 4 inputs');
gettext('NOR_7');
gettext('NOR logic gate 7 inputs');
gettext('NOR_8');
gettext('NOR logic gate 8 inputs');
gettext('NOR_6');
gettext('NOR logic gate 6 inputs');
gettext('NOR_3');
gettext('NOR logic gate 3 inputs');
gettext('NOR_2');
gettext('NOR logic gate 2 inputs');
gettext('XOR');
gettext('XOR_6');
gettext('XOR logic gate 6 inputs');
gettext('XOR_2');
gettext('XOR logic gate 2 inputs');
gettext('XOR_3');
gettext('XOR logic gate 3 inputs');
gettext('XOR_7');
gettext('XOR logic gate 7 inputs');
gettext('XOR_5');
gettext('XOR logic gate 5 inputs');
gettext('XOR_4');
gettext('XOR logic gate 4 inputs');
gettext('XOR_8');
gettext('XOR logic gate 8 inputs');
gettext('NAND');
gettext('NAND_5');
gettext('NAND logic gate 5 inputs');
gettext('NAND_6');
gettext('NAND logic gate 6 inputs');
gettext('NAND_3');
gettext('NAND logic gate 3 inputs');
gettext('NAND_4');
gettext('NAND logic gate 4 inputs');
gettext('NAND_2');
gettext('NAND logic gate 2 inputs');
gettext('NAND_7');
gettext('NAND logic gate 7 inputs');
gettext('NAND_8');
gettext('NAND logic gate 8 inputs');
gettext('XNOR');
gettext('XNOR_3');
gettext('XNOR logic gate 3 inputs');
gettext('XNOR_7');
gettext('XNOR logic gate 7 inputs');
gettext('XNOR_4');
gettext('XNOR logic gate 4 inputs');
gettext('XNOR_6');
gettext('XNOR logic gate 6 inputs');
gettext('XNOR_8');
gettext('XNOR logic gate 8 inputs');
gettext('XNOR_2');
gettext('XNOR logic gate 2 inputs');
gettext('XNOR_5');
gettext('XNOR logic gate 5 inputs');
gettext('Const');
gettext('Bus');
gettext('1s');
gettext('Valor_1s_8_bits');
gettext('Valor constante de unos para bus de 8 bits');
gettext('Valor_1s_4_bits');
gettext('Valor constante de unos para bus de 4 bits');
gettext('Valor_1s_16_bits');
gettext('Valor constante de unos para bus de 16 bits');
gettext('Valor_1s_32_bits');
gettext('Valor constante de unos para bus de 32 bits');
gettext('Valor_1s_2_bits');
gettext('Valor constante de unos para bus de 2 bits');
gettext('Val');
gettext('Const_16_bits');
gettext('Valor constante para bus de 16 bits');
gettext('Const_32_bits');
gettext('Valor constante para bus de 32 bits');
gettext('Const_8_bits');
gettext('Valor constante para bus de 8 bits');
gettext('Const_4_bits');
gettext('Valor constante para bus de 4 bits');
gettext('Const_2_bits');
gettext('Valor constante para bus de 2 bits');
gettext('0');
gettext('Valor_0_2_bits');
gettext('Valor constante 0 para bus de 2 bits');
gettext('Valor_0_32_bits');
gettext('Valor constante 0 para bus de 32 bits');
gettext('Valor_0_8_bits');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor_0_16_bits');
gettext('Valor constante 0 para bus de 16 bits');
gettext('Valor_0_4_bits');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Bit');
gettext('0-torch');
gettext('Un bit constante a 0');
gettext('1-torch');
gettext('Un bit constante a 1');
gettext('0');
gettext('Assign 0 to the output wire');
gettext('1');
gettext('Assign 1 to the output wire');
gettext('Varios');
gettext('Registros');
gettext('Universal');
gettext('Simple');
gettext('Reg_Universal_32_Simple');
gettext('Registro de desplazamiento universal de 32 bits con enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_3_Simple');
gettext('Registro de desplazamiento universal de 3 bits con enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_16_Simple');
gettext('Registro de desplazamiento universal de 16 bits con enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_4_Simple');
gettext('Registro de desplazamiento universal de 4 bits con enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_8_Simple');
gettext('Registro de desplazamiento universal de 8 bits con enable, carga paralela y desplazamiento bidireccional');
gettext('Completo');
gettext('Reg_Universal_8_Completo');
gettext('Registro de desplazamiento universal de 8 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_9_Completo');
gettext('Registro de desplazamiento universal de 9 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_3_Completo');
gettext('Registro de desplazamiento universal de 3 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_32_Completo');
gettext('Registro de desplazamiento universal de 32 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_4_Completo');
gettext('Registro de desplazamiento universal de 4 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_2_Completo');
gettext('Registro de desplazamiento universal de 2 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_10_Completo');
gettext('Registro de desplazamiento universal de 10 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Reg_Universal_16_Completo');
gettext('Registro de desplazamiento universal de 16 bits con reset, enable, carga paralela y desplazamiento bidireccional');
gettext('Simple');
gettext('Reg_1_Simple');
gettext('Registro de 1 bits simplificado');
gettext('Reg_2_Simple');
gettext('Registro de 2 bits simplificado');
gettext('Reg_8_Simple');
gettext('Registro de 8 bits simplificado');
gettext('Reg_16_Simple');
gettext('Registro de 16 bits simplificado');
gettext('Reg_32_Simple');
gettext('Registro de 32 bits simplificado');
gettext('Reg_4_Simple');
gettext('Registro de 4 bits simplificado');
gettext('Derecha');
gettext('Ena_Rst');
gettext('Desp_Derecha_2_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 2 bits con reset y enable');
gettext('Desp_Derecha_8_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 8 bits con reset y enable');
gettext('Desp_Derecha_9_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 9 bits con reset y enable');
gettext('Desp_Derecha_32_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 32 bits con reset y enable');
gettext('Desp_Derecha_4_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 4 bits con reset y enable');
gettext('Desp_Derecha_3_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 3 bits con reset y enable');
gettext('Desp_Derecha_16_Ena_Rst');
gettext('Registro de desplazamiento a derecha de 16 bits con reset y enable');
gettext('Simple');
gettext('Desp_Derecha_4_Simple');
gettext('Registro de desplazamiento a derecha de 4 bits');
gettext('Desp_Derecha_8_Simple');
gettext('Registro de desplazamiento a derecha de 8 bits');
gettext('Desp_Derecha_16_Simple');
gettext('Registro de desplazamiento a derecha de 16 bits');
gettext('Desp_Derecha_32_Simple');
gettext('Registro de desplazamiento a derecha de 32 bits');
gettext('Desp_Derecha_3_Simple');
gettext('Registro de desplazamiento a derecha de 3 bits');
gettext('Completo');
gettext('Desp_Derecha_8_Completo');
gettext('Registro de desplazamiento a derecha de 8 bits con reset, enable y carga paralela');
gettext('Desp_Derecha_32_Completo');
gettext('Registro de desplazamiento a derecha de 32 bits con reset, enable y carga paralela');
gettext('Desp_Derecha_10_Completo');
gettext('Registro de desplazamiento a derecha de 10 bits con reset, enable y carga paralela');
gettext('Desp_Derecha_3_Completo');
gettext('Registro de desplazamiento a derecha de 3 bits con reset, enable y carga paralela');
gettext('Desp_Derecha_16_Completo');
gettext('Registro de desplazamiento a derecha de 16 bits con reset, enable y carga paralela');
gettext('Desp_Derecha_4_Completo');
gettext('Registro de desplazamiento a derecha de 4 bits con reset, enable y carga paralela');
gettext('Completo');
gettext('Reg_1_Completo');
gettext('Registro de 1 bits con reset, enable y valor inicial ');
gettext('Reg_4_Completo');
gettext('Registro de 4 bits con reset, enable y valor inicial ');
gettext('Reg_16_Completo');
gettext('Registro de 16 bits con reset, enable y valor inicial ');
gettext('Reg_32_Completo');
gettext('Registro de 32 bits con reset, enable y valor inicial ');
gettext('Reg_2_Completo');
gettext('Registro de 2 bits con reset, enable y valor inicial ');
gettext('Reg_8_Completo');
gettext('Registro de 8 bits con reset, enable y valor inicial ');
gettext('Izquierda');
gettext('Ena_Rst');
gettext('Desp_Izquierda_3_Ena_Rst');
gettext('Registro de desplazamiento a izquierda de 3 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_32_Ena_Rst');
gettext('Registro de desplazamiento a izquierda de 32 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_4_Ena_Rst');
gettext('Registro de desplazamiento a izquierda de 4 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_8_Ena_Rst');
gettext('Registro de desplazamiento a izquierda de 8 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_16_Ena_Rst');
gettext('Registro de desplazamiento a izquierda de 16 bits con reset, enable y carga paralela');
gettext('Simple');
gettext('Desp_Izquierda_16_Simple');
gettext('Registro de desplazamiento a izquierda de 16 bits');
gettext('Desp_Izquierda_8_Simple');
gettext('Registro de desplazamiento a izquierda de 8 bits');
gettext('Desp_Izquierda_32_Simple');
gettext('Registro de desplazamiento a izquierda de 32 bits');
gettext('Desp_Izquierda_3_Simple');
gettext('Registro de desplazamiento a izquierda de 3 bits');
gettext('Desp_Izquierda_4_Simple');
gettext('Registro de desplazamiento a izquierda de 4 bits');
gettext('Completo');
gettext('Desp_Izquierda_3_Completo');
gettext('Registro de desplazamiento a izquierda de 3 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_16_Completo');
gettext('Registro de desplazamiento a izquierda de 16 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_32_Completo');
gettext('Registro de desplazamiento a izquierda de 32 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_8_Completo');
gettext('Registro de desplazamiento a izquierda de 8 bits con reset, enable y carga paralela');
gettext('Desp_Izquierda_4_Completo');
gettext('Registro de desplazamiento a izquierda de 4 bits con reset, enable y carga paralela');
gettext('Comunicación');
gettext('PS2');
gettext('RX_PS2');
gettext('Receptor PS/2');
gettext('Los sincronizadores\nreducen el riesgo\nde metaestabilidad.');
gettext('Los datos se muestrean\nen el flanco descendente\ndel reloj.');
gettext('8 bits de datos');
gettext('1 bit de paridad');
gettext('El flip-flop D junto con\nel registro de 8 bits\nforman uno de 9 bits.');
gettext('Cálculo de la paridad\nimpar (XNOR de los 9 bits)');
gettext('En total son 11 bits:\n<ul><li>1 START</li><li>8 Datos</li><li>1 Paridad</li><li>1 STOP</li></ul>El contador cuenta de 0 a 10,\npor lo que es módulo 11.\nLa señal de <b>rdy</b> se\nenciende justo antes que\nel bit de STOP ingrese al\nregistro.');
gettext('Serie (RS-232)');
gettext('RX_serie_115200');
gettext('Receptor serie 8N1 115200');
gettext('TX_serie_config');
gettext('Transmisor serie de velocidad configurable');
gettext('Al comenzar una\ntransmisión el \ngenerador de tiempo\nse reinicia.\nAsegurando la \nduración del 1er bit.');
gettext('f<sub>reloj</sub>/baud_rate-1');
gettext('RX_serie_config');
gettext('Receptor serie de velocidad configurable');
gettext('Al comenzar una\nrecepción el \ngenerador de tiempo\nse reinicia.\nSe muestrea en medio\nde los bits, por esto\nes que trabajamos al\ndoble de frecuencia.');
gettext('f<sub>reloj</sub>/(2*baud_rate)-1');
gettext('  Este sincronizador es opcional.\n  Reduce la probabilidad de \nmetaestabilidad.');
gettext('TX_serie_115200');
gettext('Transmisor serie 8N1 115200');
gettext('Soporte');
gettext('Sync_x1');
gettext('Sincronizador de una etapa');
gettext('Detecta_Subida');
gettext('Detector de flanco de subida simple');
gettext('FSM_RX_simple');
gettext('Máquina de estados de recepción');
gettext('  El flip-flop arranca en 0. Por lo que su salida negada es 1 y estamos en el estado de IDLE.\n  La AND <b>1</b> se encarga de realizar la transición al estado RECEIVE.\n  Cuando la entrada <b>start</b> pasa a 1 esta AND lleva el flip-flop a 1.\n  Cuando el flip-flop está en 1 estamos en el estado de RECEIVE.\n  La señal de cuenta terminal (<b>tc</b>) se encarga de la transición al estado IDLE.\n  Normalmente es 0, que al pasar por el negador mantiene a la AND <b>2</b> habilitada. Al terminar\nla recepción pasa a 1 forzando a la AND <b>2</b> a 0, y por consiguiente se pasa al estado IDLE. \n  La AND <b>2</b> se encarga de retener el estado RECEIVE. Durante la recepción sus entradas son\n1, pasando i0 a 0 al terminar la recepción. Con lo cual volvemos al estado de IDLE.');
gettext('<big>\n2\n</big>');
gettext('<big>\n1\n</big>');
gettext('<big>\n3\n</big>');
gettext('Sync_x2');
gettext('Sincronizador de dos etapa');
gettext('Detecta_Bajada');
gettext('Detector de flanco de bajada simple');
gettext('FSM_TX_simple');
gettext('Máquina de estados de transmisión');
gettext('  El flip-flop arranca en 0. Por lo que su salida negada es 1 y estamos en el estado de IDLE.\n  La AND <b>1</b> se encarga de realizar la transición al estado TRANSMIT.\n  Cuando la entrada <b>inicio</b> pasa a 1 esta AND lleva el flip-flop a 1.\n  Cuando el flip-flop está en 1 estamos en el estado de TRANSMIT.\n  La señal de cuenta terminal (<b>tc</b>) se encarga de la transición al estado IDLE.\n  Normalmente es 0, que al pasar por el negador mantiene a la AND <b>2</b> habilitada. Al terminar\nla transmisión pasa a 1 forzando a la AND <b>2</b> a 0, y por consiguiente se pasa al estado IDLE. \n  La AND <b>2</b> se encarga de retener el estado TRANSMIT. Durante la transmisión sus entradas son\n1, pasando i0 a 0 al terminar la transmisión. Con lo cual volvemos al estado de IDLE.');
gettext('<big>\n2\n</big>');
gettext('<big>\n1\n</big>');
gettext('TX_Serie_base');
gettext('Transmisor serie sin generador de baudate');
gettext('Bit de stop');
gettext('Bit de start');
gettext('El bus permanece\nen 1 cuando no\nse transmite');
gettext('El bus permanece\nen 1 cuando no\nse transmite');
gettext('1 bit start +\n8 bits datos +\n1 bit stop = 10 bits');
gettext('La OR habilita el\nregistro para la\ncarga paralela');
gettext('RX_Serie_base');
gettext('Transmisor serie sin generador de baudate');
gettext('  ¿Por qué el contador es hasta 18?\n  Un dato son 10 bits: 1 bit start + 8 bits datos + 1 bit stop = 10 bits\n  Muestreamos al doble de frecuencia para poder muestrear el medio de los bits.\n  Cuando estamos en la mitad del bit de STOP ya podemos dar por concluida\nla recepción. Esto es 9 bits + 1/2 del de STOP. Y por esto es que son 19\nlos pulsos necesarios (0 a 18).');
gettext('  Ingresamos 1 bit cada 2 pulsos de <b>ena</b>, de esta manera\nmuestreamos en el medio del bit.\n  Por eso usamos los valores pares del contador.\n  Los valores impares son las puntas del bit.\n  Tener en cuenta que al iniciar la recepción reseteamos el \ncontador, por lo que durante la primer mitad del bit de START\nel contador es 0, y ese valor es par. El muestreo se hace al\nterminar ese medio bit.');
gettext('  El bit de <b>START</b> ingresa al\nregistro, pero como sólo \ntiene 8 bits es desplazado\nafuera por los 8 bits de\ndatos.\n  El bit de <b>STOP</b> ingresa\nal registro después del pulso\nde <b>rdy</b>, por lo que se supone\nque el usuario ya retiró el\nresultado.');
gettext('Codificadores');
gettext('Bus');
gettext('Codificador_4_2_Bus');
gettext('Codificador de 4 entradas y 2 salidas (usando buses)');
gettext('2<sup>N</sup> entradas');
gettext('N salidas\nIndica cuál entrada es 1\nLas más pesadas tienen prioridad');
gettext('Salida de grupo\nIndica que al menos una \nentrada es 1\nPermite distinguir el caso\nen que ninguna entrada sea 1\n');
gettext('Codificador_32_5_Bus');
gettext('Codificador de 32 entradas y 5 salidas (usando buses)');
gettext('2<sup>N</sup> entradas');
gettext('N salidas\nIndica cuál entrada es 1\nLas más pesadas tienen prioridad');
gettext('Salida de grupo\nIndica que al menos una \nentrada es 1\nPermite distinguir el caso\nen que ninguna entrada sea 1\n');
gettext('Codificador_2_1_Bus');
gettext('Codificador de 2 entradas y 1 salidas (usando buses)');
gettext('2<sup>N</sup> entradas');
gettext('N salidas\nIndica cuál entrada es 1\nLas más pesadas tienen prioridad');
gettext('Salida de grupo\nIndica que al menos una \nentrada es 1\nPermite distinguir el caso\nen que ninguna entrada sea 1\n');
gettext('Codificador_8_3_Bus');
gettext('Codificador de 8 entradas y 3 salidas (usando buses)');
gettext('2<sup>N</sup> entradas');
gettext('N salidas\nIndica cuál entrada es 1\nLas más pesadas tienen prioridad');
gettext('Salida de grupo\nIndica que al menos una \nentrada es 1\nPermite distinguir el caso\nen que ninguna entrada sea 1\n');
gettext('Codificador_16_4_Bus');
gettext('Codificador de 16 entradas y 4 salidas (usando buses)');
gettext('2<sup>N</sup> entradas');
gettext('N salidas\nIndica cuál entrada es 1\nLas más pesadas tienen prioridad');
gettext('Salida de grupo\nIndica que al menos una \nentrada es 1\nPermite distinguir el caso\nen que ninguna entrada sea 1\n');
gettext('Wires');
gettext('Codificador_32_5');
gettext('Codificador de 32 entradas y 5 salidas');
gettext('Codificador_8_3');
gettext('Codificador de 8 entradas y 3 salidas');
gettext('Codificador_4_2');
gettext('Codificador de 4 entradas y 2 salidas');
gettext('Codificador_16_4');
gettext('Codificador de 16 entradas y 4 salidas');
gettext('Setup');
gettext('Tri-state');
gettext('Tri-state logic block');
gettext('Pull-up');
gettext('FPGA internal pull-up configuration on the connected input port');
gettext('Multiplexores');
gettext('2 canales');
gettext('Mux2_32');
gettext('Multiplexor de 2 a 1 de buses de 32 bits');
gettext('Mux2_8');
gettext('Multiplexor de 2 a 1 de buses de 8 bits');
gettext('Mux2_2');
gettext('Multiplexor de 2 a 1 de buses de 2 bits');
gettext('Mux2_16');
gettext('Multiplexor de 2 a 1 de buses de 16 bits');
gettext('Mux2_1');
gettext('Multiplexor de 2 a 1 de buses de 1 bits');
gettext('Mux2_4');
gettext('Multiplexor de 2 a 1 de buses de 4 bits');
gettext('4 canales');
gettext('Mux4_2');
gettext('Multiplexor de 4 a 1 de buses de 2 bits');
gettext('Mux4_1');
gettext('Multiplexor de 4 a 1 de buses de 1 bits');
gettext('Mux4_8');
gettext('Multiplexor de 4 a 1 de buses de 8 bits');
gettext('Mux4_16');
gettext('Multiplexor de 4 a 1 de buses de 16 bits');
gettext('Mux4_4');
gettext('Multiplexor de 4 a 1 de buses de 4 bits');
gettext('Mux4_32');
gettext('Multiplexor de 4 a 1 de buses de 32 bits');
gettext('8 canales');
gettext('Mux8_32');
gettext('Multiplexor de 8 a 1 de buses de 32 bits');
gettext('Mux8_8');
gettext('Multiplexor de 8 a 1 de buses de 8 bits');
gettext('Mux8_2');
gettext('Multiplexor de 8 a 1 de buses de 2 bits');
gettext('Mux8_16');
gettext('Multiplexor de 8 a 1 de buses de 16 bits');
gettext('Mux8_1');
gettext('Multiplexor de 8 a 1 de buses de 1 bits');
gettext('Mux8_4');
gettext('Multiplexor de 8 a 1 de buses de 4 bits');
gettext('Contadores');
gettext('Prescaler');
gettext('PrescalerN');
gettext('Divide la frecuencia del enable por la potencia N+1 de 2');
gettext('PrescalerN_simple');
gettext('Divisor de frecuencia por la potencia N+1 de 2, versión simple');
gettext('Asc_Desc');
gettext('BCD Natural');
gettext('Contador_BCD_Completo_UD');
gettext('Contador BCD Natural des/ascendente con habilitación, reset y carga paralela');
gettext('Contador_BCD_Simple_UD');
gettext('Contador BCD Natural des/ascendente con reset');
gettext('Contador_BCD_Simple_Enable_UD');
gettext('Contador BCD des/ascendente con enable y reset');
gettext('32 bits');
gettext('Contador_Simple_Enable_32_UD');
gettext('Contador de hasta 32 bits des/ascedente con inicio, fin, reset y enable');
gettext('Contador_Completo_32_UD');
gettext('Contador de hasta 32 bits des/ascendente, con inicio, fin, reset y carga paralela');
gettext('Contador_Simple_32_UD');
gettext('Contador de hasta 32 bits des/ascendente, con inicio, fin y reset');
gettext('Ascendente');
gettext('BCD Natural');
gettext('Contador_BCD_Simple_Enable');
gettext('Contador BCD con enable y reset');
gettext('Contador_BCD_Simple');
gettext('Contador BCD Natural con reset');
gettext('Contador_BCD_Completo');
gettext('Contador BCD Natural con habilitación, reset y carga paralela');
gettext('32 bits');
gettext('Contador_Simple_Enable_32');
gettext('Contador de hasta 32 bits con inicio, fin, reset y enable');
gettext('Contador_Completo_32');
gettext('Contador de hasta 32 bits con inicio, fin, reset y carga paralela');
gettext('Contador_Simple_32');
gettext('Contador de hasta 32 bits con inicio, fin y reset');
gettext('Buses');
gettext('NOT');
gettext('NOT_4');
gettext('NOT logic gate for a 4 bits bus');
gettext('NOT_16');
gettext('NOT logic gate for a 16 bits bus');
gettext('NOT_8');
gettext('NOT logic gate for a 8 bits bus');
gettext('NOT_32');
gettext('NOT logic gate for a 32 bits bus');
gettext('NOT_2');
gettext('NOT logic gate for a 2 bits bus');
gettext('AND');
gettext('bus_out');
gettext('AND_2');
gettext('AND logic gate for two 2 bits buses');
gettext('AND_4');
gettext('AND logic gate for two 4 bits buses');
gettext('AND_32');
gettext('AND logic gate for two 32 bits buses');
gettext('AND_16');
gettext('AND logic gate for two 16 bits buses');
gettext('AND_8');
gettext('AND logic gate for two 8 bits buses');
gettext('1_out');
gettext('AND_2');
gettext('AND logic gate for a 2 bits bus');
gettext('AND_4');
gettext('AND logic gate for a 4 bits bus');
gettext('AND_32');
gettext('AND logic gate for a 32 bits bus');
gettext('AND_16');
gettext('AND logic gate for a 16 bits bus');
gettext('AND_8');
gettext('AND logic gate for a 8 bits bus');
gettext('1_to_all');
gettext('AND_2');
gettext('Applies the AND between v and each member of i');
gettext('AND_4');
gettext('Applies the AND between v and each member of i');
gettext('AND_32');
gettext('Applies the AND between v and each member of i');
gettext('AND_16');
gettext('Applies the AND between v and each member of i');
gettext('AND_8');
gettext('Applies the AND between v and each member of i');
gettext('OR');
gettext('bus_out');
gettext('OR_32');
gettext('OR logic gate for two 32 bits buses');
gettext('OR_16');
gettext('OR logic gate for two 16 bits buses');
gettext('OR_8');
gettext('OR logic gate for two 8 bits buses');
gettext('OR_2');
gettext('OR logic gate for two 2 bits buses');
gettext('OR_4');
gettext('OR logic gate for two 4 bits buses');
gettext('1_out');
gettext('OR_32');
gettext('OR logic gate for a 32 bits bus');
gettext('OR_16');
gettext('OR logic gate for a 16 bits bus');
gettext('OR_8');
gettext('OR logic gate for a 8 bits bus');
gettext('OR_2');
gettext('OR logic gate for a 2 bits bus');
gettext('OR_4');
gettext('OR logic gate for a 4 bits bus');
gettext('1_to_all');
gettext('OR_32');
gettext('Applies the OR between v and each member of i');
gettext('OR_16');
gettext('Applies the OR between v and each member of i');
gettext('OR_8');
gettext('Applies the OR between v and each member of i');
gettext('OR_2');
gettext('Applies the OR between v and each member of i');
gettext('OR_4');
gettext('Applies the OR between v and each member of i');
gettext('NOR');
gettext('bus_out');
gettext('NOR_4');
gettext('NOR logic gate for two 4 bits buses');
gettext('NOR_32');
gettext('NOR logic gate for two 32 bits buses');
gettext('NOR_16');
gettext('NOR logic gate for two 16 bits buses');
gettext('NOR_8');
gettext('NOR logic gate for two 8 bits buses');
gettext('NOR_2');
gettext('NOR logic gate for two 2 bits buses');
gettext('1_out');
gettext('NOR_4');
gettext('NOR logic gate for a 4 bits bus');
gettext('NOR_32');
gettext('NOR logic gate for a 32 bits bus');
gettext('NOR_16');
gettext('NOR logic gate for a 16 bits bus');
gettext('NOR_8');
gettext('NOR logic gate for a 8 bits bus');
gettext('NOR_2');
gettext('NOR logic gate for a 2 bits bus');
gettext('Separar');
gettext('Split_wires');
gettext('Split_31');
gettext('Separador de 1 bus de 31 bits a bits');
gettext('Split_5');
gettext('Separador de 1 bus de 5 bits a bits');
gettext('Split_15');
gettext('Separador de 1 bus de 15 bits a bits');
gettext('Split_32');
gettext('Separador de 1 bus de 32 bits a bits');
gettext('Split_13');
gettext('Separador de 1 bus de 13 bits a bits');
gettext('Split_8');
gettext('Separador de 1 bus de 8 bits a bits');
gettext('Split_20');
gettext('Separador de 1 bus de 20 bits a bits');
gettext('Split_6');
gettext('Separador de 1 bus de 6 bits a bits');
gettext('Split_22');
gettext('Separador de 1 bus de 22 bits a bits');
gettext('Split_29');
gettext('Separador de 1 bus de 29 bits a bits');
gettext('Split_19');
gettext('Separador de 1 bus de 19 bits a bits');
gettext('Split_18');
gettext('Separador de 1 bus de 18 bits a bits');
gettext('Split_24');
gettext('Separador de 1 bus de 24 bits a bits');
gettext('Split_26');
gettext('Separador de 1 bus de 26 bits a bits');
gettext('Split_2');
gettext('Separador de 1 bus de 2 bits a bits');
gettext('Split_27');
gettext('Separador de 1 bus de 27 bits a bits');
gettext('Split_14');
gettext('Separador de 1 bus de 14 bits a bits');
gettext('Split_23');
gettext('Separador de 1 bus de 23 bits a bits');
gettext('Split_7');
gettext('Separador de 1 bus de 7 bits a bits');
gettext('Split_25');
gettext('Separador de 1 bus de 25 bits a bits');
gettext('Split_11');
gettext('Separador de 1 bus de 11 bits a bits');
gettext('Split_3');
gettext('Separador de 1 bus de 3 bits a bits');
gettext('Split_28');
gettext('Separador de 1 bus de 28 bits a bits');
gettext('Split_30');
gettext('Separador de 1 bus de 30 bits a bits');
gettext('Split_10');
gettext('Separador de 1 bus de 10 bits a bits');
gettext('Split_4');
gettext('Separador de 1 bus de 4 bits a bits');
gettext('Split_12');
gettext('Separador de 1 bus de 12 bits a bits');
gettext('Split_9');
gettext('Separador de 1 bus de 9 bits a bits');
gettext('Split_21');
gettext('Separador de 1 bus de 21 bits a bits');
gettext('Split_16');
gettext('Separador de 1 bus de 16 bits a bits');
gettext('Split_17');
gettext('Separador de 1 bus de 17 bits a bits');
gettext('Split_4');
gettext('Split_32_8,8,8,8');
gettext('Separador de 1 bus de 32 bits a 4 buses de 8/8/8/8 bits');
gettext('Split_16_4,4,4,4');
gettext('Separador de 1 bus de 16 bits a 4 buses de 4/4/4/4 bits');
gettext('Split_8_2,2,2,2');
gettext('Separador de 1 bus de 8 bits a 4 buses de 2/2/2/2 bits');
gettext('Split_2');
gettext('Split_8_4,4');
gettext('Separador de 1 bus de 8 bits a 2 buses de 4/4 bits');
gettext('Split_32_16,16');
gettext('Separador de 1 bus de 32 bits a 2 buses de 16/16 bits');
gettext('Split_16_8,8');
gettext('Separador de 1 bus de 16 bits a 2 buses de 8/8 bits');
gettext('Split_4_2,2');
gettext('Separador de 1 bus de 4 bits a 2 buses de 2/2 bits');
gettext('Split_3');
gettext('Split_16_4,4,8');
gettext('Separador de 1 bus de 16 bits a 3 buses de 4/4/8 bits');
gettext('Split_4_1,1,2');
gettext('Separador de 1 bus de 4 bits a 3 buses de 1/1/2 bits');
gettext('Split_32_8,8,16');
gettext('Separador de 1 bus de 32 bits a 3 buses de 8/8/16 bits');
gettext('Split_8_2,2,4');
gettext('Separador de 1 bus de 8 bits a 3 buses de 2/2/4 bits');
gettext('Seleccionar');
gettext('Wire');
gettext('Seleccionar1_2_1');
gettext('Separa 1 bit de un bus de 2 bits');
gettext('Seleccionar1_4_1');
gettext('Separa 1 bit de un bus de 4 bits');
gettext('Seleccionar1_16_1');
gettext('Separa 1 bit de un bus de 16 bits');
gettext('Seleccionar1_8_1');
gettext('Separa 1 bit de un bus de 8 bits');
gettext('Seleccionar1_32_1');
gettext('Separa 1 bit de un bus de 32 bits');
gettext('Bus');
gettext('Seleccionar_16_8');
gettext('Separa 8 bits de un bus de 16 bits');
gettext('Seleccionar_4_2');
gettext('Separa 2 bits de un bus de 4 bits');
gettext('Seleccionar_16_4');
gettext('Separa 4 bits de un bus de 16 bits');
gettext('Seleccionar_16_2');
gettext('Separa 2 bits de un bus de 16 bits');
gettext('Seleccionar_8_2');
gettext('Separa 2 bits de un bus de 8 bits');
gettext('Seleccionar_8_4');
gettext('Separa 4 bits de un bus de 8 bits');
gettext('Seleccionar_32_2');
gettext('Separa 2 bits de un bus de 32 bits');
gettext('Seleccionar_32_8');
gettext('Separa 8 bits de un bus de 32 bits');
gettext('Seleccionar_32_16');
gettext('Separa 16 bits de un bus de 32 bits');
gettext('Seleccionar_32_4');
gettext('Separa 4 bits de un bus de 32 bits');
gettext('Unir');
gettext('Join_2');
gettext('Join_1,1_2');
gettext('Agregador de 2 buses de 1/1 bits a 1 bus de 2 bits');
gettext('Join_4,4_8');
gettext('Agregador de 2 buses de 4/4 bits a 1 bus de 8 bits');
gettext('Join_16,16_32');
gettext('Agregador de 2 buses de 16/16 bits a 1 bus de 32 bits');
gettext('Join_8,8_16');
gettext('Agregador de 2 buses de 8/8 bits a 1 bus de 16 bits');
gettext('Join_2,2_4');
gettext('Agregador de 2 buses de 2/2 bits a 1 bus de 4 bits');
gettext('Join_3');
gettext('Join_2,2,4_8');
gettext('Agregador de 3 buses de 2/2/4 bits a 1 bus de 8 bits');
gettext('Join_4,4,8_16');
gettext('Agregador de 3 buses de 4/4/8 bits a 1 bus de 16 bits');
gettext('Join_1,1,2_4');
gettext('Agregador de 3 buses de 1/1/2 bits a 1 bus de 4 bits');
gettext('Join_8,8,16_32');
gettext('Agregador de 3 buses de 8/8/16 bits a 1 bus de 32 bits');
gettext('Join_1,8,1_10');
gettext('Agregador de 3 buses de 1/8/1 bits a 1 bus de 10 bits');
gettext('Join_4');
gettext('Join_8,8,8,8_32');
gettext('Agregador de 4 buses de 8/8/8/8 bits a 1 bus de 32 bits');
gettext('Join_4,4,4,4_16');
gettext('Agregador de 4 buses de 4/4/4/4 bits a 1 bus de 16 bits');
gettext('Join_1,1,1,1_4');
gettext('Agregador de 4 buses de 1/1/1/1 bits a 1 bus de 4 bits');
gettext('Join_2,2,2,2_8');
gettext('Agregador de 4 buses de 2/2/2/2 bits a 1 bus de 8 bits');
gettext('Join_wires');
gettext('Join_28');
gettext('Agregador de 28 bits a 1 bus');
gettext('Join_7');
gettext('Agregador de 7 bits a 1 bus');
gettext('Join_19');
gettext('Agregador de 19 bits a 1 bus');
gettext('Join_12');
gettext('Agregador de 12 bits a 1 bus');
gettext('Join_13');
gettext('Agregador de 13 bits a 1 bus');
gettext('Join_5');
gettext('Agregador de 5 bits a 1 bus');
gettext('Join_27');
gettext('Agregador de 27 bits a 1 bus');
gettext('Join_10');
gettext('Agregador de 10 bits a 1 bus');
gettext('Join_32');
gettext('Agregador de 32 bits a 1 bus');
gettext('Join_29');
gettext('Agregador de 29 bits a 1 bus');
gettext('Join_14');
gettext('Agregador de 14 bits a 1 bus');
gettext('Join_2');
gettext('Agregador de 2 bits a 1 bus');
gettext('Join_11');
gettext('Agregador de 11 bits a 1 bus');
gettext('Join_17');
gettext('Agregador de 17 bits a 1 bus');
gettext('Join_16');
gettext('Agregador de 16 bits a 1 bus');
gettext('Join_22');
gettext('Agregador de 22 bits a 1 bus');
gettext('Join_9');
gettext('Agregador de 9 bits a 1 bus');
gettext('Join_6');
gettext('Agregador de 6 bits a 1 bus');
gettext('Join_18');
gettext('Agregador de 18 bits a 1 bus');
gettext('Join_31');
gettext('Agregador de 31 bits a 1 bus');
gettext('Join_25');
gettext('Agregador de 25 bits a 1 bus');
gettext('Join_15');
gettext('Agregador de 15 bits a 1 bus');
gettext('Join_30');
gettext('Agregador de 30 bits a 1 bus');
gettext('Join_24');
gettext('Agregador de 24 bits a 1 bus');
gettext('Join_8');
gettext('Agregador de 8 bits a 1 bus');
gettext('Join_20');
gettext('Agregador de 20 bits a 1 bus');
gettext('Join_23');
gettext('Agregador de 23 bits a 1 bus');
gettext('Join_26');
gettext('Agregador de 26 bits a 1 bus');
gettext('Join_4');
gettext('Agregador de 4 bits a 1 bus');
gettext('Join_3');
gettext('Agregador de 3 bits a 1 bus');
gettext('Join_21');
gettext('Agregador de 21 bits a 1 bus');
gettext('XOR');
gettext('bus_out');
gettext('XOR_32');
gettext('XOR logic gate for two 32 bits buses');
gettext('XOR_2');
gettext('XOR logic gate for two 2 bits buses');
gettext('XOR_4');
gettext('XOR logic gate for two 4 bits buses');
gettext('XOR_16');
gettext('XOR logic gate for two 16 bits buses');
gettext('XOR_8');
gettext('XOR logic gate for two 8 bits buses');
gettext('1_out');
gettext('XOR_32');
gettext('XOR logic gate for a 32 bits bus');
gettext('XOR_2');
gettext('XOR logic gate for a 2 bits bus');
gettext('XOR_4');
gettext('XOR logic gate for a 4 bits bus');
gettext('XOR_16');
gettext('XOR logic gate for a 16 bits bus');
gettext('XOR_8');
gettext('XOR logic gate for a 8 bits bus');
gettext('1_to_all');
gettext('XOR_32');
gettext('Applies the XOR between v and each member of i');
gettext('XOR_2');
gettext('Applies the XOR between v and each member of i');
gettext('XOR_4');
gettext('Applies the XOR between v and each member of i');
gettext('XOR_16');
gettext('Applies the XOR between v and each member of i');
gettext('XOR_8');
gettext('Applies the XOR between v and each member of i');
gettext('Reducir');
gettext('Reducir_9_8');
gettext('Reduce un bus de 9 bits a 8 bits (toma los LSBs)');
gettext('Reducir_16_4');
gettext('Reduce un bus de 16 bits a 4 bits (toma los LSBs)');
gettext('Reducir_32_4');
gettext('Reduce un bus de 32 bits a 4 bits (toma los LSBs)');
gettext('Reducir_8_4');
gettext('Reduce un bus de 8 bits a 4 bits (toma los LSBs)');
gettext('Reducir_16_8');
gettext('Reduce un bus de 16 bits a 8 bits (toma los LSBs)');
gettext('Reducir_32_2');
gettext('Reduce un bus de 32 bits a 2 bits (toma los LSBs)');
gettext('Reducir_16_2');
gettext('Reduce un bus de 16 bits a 2 bits (toma los LSBs)');
gettext('Reducir_4_2');
gettext('Reduce un bus de 4 bits a 2 bits (toma los LSBs)');
gettext('Reducir_32_16');
gettext('Reduce un bus de 32 bits a 16 bits (toma los LSBs)');
gettext('Reducir_2_1');
gettext('Reduce un bus de 2 bits a 1 bits (toma los LSBs)');
gettext('Reducir_32_8');
gettext('Reduce un bus de 32 bits a 8 bits (toma los LSBs)');
gettext('Reducir_8_2');
gettext('Reduce un bus de 8 bits a 2 bits (toma los LSBs)');
gettext('Expandir');
gettext('Expandir_1_8');
gettext('Expande un bus de 1 bits a 8 bits (rellena con 0s)');
gettext('Expandir_2_16');
gettext('Expande un bus de 2 bits a 16 bits (rellena con 0s)');
gettext('Expandir_4_16');
gettext('Expande un bus de 4 bits a 16 bits (rellena con 0s)');
gettext('Expandir_8_32');
gettext('Expande un bus de 8 bits a 32 bits (rellena con 0s)');
gettext('Expandir_4_8');
gettext('Expande un bus de 4 bits a 8 bits (rellena con 0s)');
gettext('Expandir_2_8');
gettext('Expande un bus de 2 bits a 8 bits (rellena con 0s)');
gettext('Expandir_2_4');
gettext('Expande un bus de 2 bits a 4 bits (rellena con 0s)');
gettext('Expandir_1_32');
gettext('Expande un bus de 1 bits a 32 bits (rellena con 0s)');
gettext('Expandir_1_2');
gettext('Expande un bus de 1 bits a 2 bits (rellena con 0s)');
gettext('Expandir_4_32');
gettext('Expande un bus de 4 bits a 32 bits (rellena con 0s)');
gettext('Expandir_1_4');
gettext('Expande un bus de 1 bits a 4 bits (rellena con 0s)');
gettext('Expandir_8_16');
gettext('Expande un bus de 8 bits a 16 bits (rellena con 0s)');
gettext('Expandir_2_32');
gettext('Expande un bus de 2 bits a 32 bits (rellena con 0s)');
gettext('Expandir_16_32');
gettext('Expande un bus de 16 bits a 32 bits (rellena con 0s)');
gettext('Expandir_1_16');
gettext('Expande un bus de 1 bits a 16 bits (rellena con 0s)');
gettext('NAND');
gettext('bus_out');
gettext('NAND_16');
gettext('NAND logic gate for two 16 bits buses');
gettext('NAND_4');
gettext('NAND logic gate for two 4 bits buses');
gettext('NAND_2');
gettext('NAND logic gate for two 2 bits buses');
gettext('NAND_8');
gettext('NAND logic gate for two 8 bits buses');
gettext('NAND_32');
gettext('NAND logic gate for two 32 bits buses');
gettext('1_out');
gettext('NAND_16');
gettext('NAND logic gate for a 16 bits bus');
gettext('NAND_4');
gettext('NAND logic gate for a 4 bits bus');
gettext('NAND_2');
gettext('NAND logic gate for a 2 bits bus');
gettext('NAND_8');
gettext('NAND logic gate for a 8 bits bus');
gettext('NAND_32');
gettext('NAND logic gate for a 32 bits bus');
gettext('Cruzar');
gettext('Wires');
gettext('Cruzar_4');
gettext('Exchanges the bit order (MSB<->LSB)');
gettext('Cruzar_16');
gettext('Exchanges the bit order (MSB<->LSB)');
gettext('Cruzar_2');
gettext('Exchanges the bit order (MSB<->LSB)');
gettext('Cruzar_32');
gettext('Exchanges the bit order (MSB<->LSB)');
gettext('Cruzar_8');
gettext('Exchanges the bit order (MSB<->LSB)');
gettext('XNOR');
gettext('bus_out');
gettext('XNOR_4');
gettext('XNOR logic gate for two 4 bits buses');
gettext('XNOR_16');
gettext('XNOR logic gate for two 16 bits buses');
gettext('XNOR_8');
gettext('XNOR logic gate for two 8 bits buses');
gettext('XNOR_2');
gettext('XNOR logic gate for two 2 bits buses');
gettext('XNOR_32');
gettext('XNOR logic gate for two 32 bits buses');
gettext('1_out');
gettext('XNOR_4');
gettext('XNOR logic gate for a 4 bits bus');
gettext('XNOR_16');
gettext('XNOR logic gate for a 16 bits bus');
gettext('XNOR_8');
gettext('XNOR logic gate for a 8 bits bus');
gettext('XNOR_2');
gettext('XNOR logic gate for a 2 bits bus');
gettext('XNOR_32');
gettext('XNOR logic gate for a 32 bits bus');
gettext('Decodificadores');
gettext('Simple');
gettext('Deco_1_2_no_ena');
gettext('1 to 2 decoder without enable');
gettext('Deco_3_8_no_ena');
gettext('3 to 8 decoder without enable');
gettext('Deco_2_4_no_ena');
gettext('2 to 4 decoder without enable');
gettext('Enable');
gettext('Deco_1_2');
gettext('1 to 2 decoder');
gettext('Deco_3_8');
gettext('3 to 8 decoder');
gettext('Deco_2_4');
gettext('2 to 4 decoder');
gettext('Demultiplexores');
gettext('Demux_4');
gettext('4 outputs demultiplexer');
gettext('Demux_2');
gettext('2 outputs demultiplexer');
gettext('Demux_8');
gettext('8 outputs demultiplexer');
gettext('Reset');
gettext('Power On Reset');
gettext('Pulso de reset inicial');
gettext('Pulso');
gettext('Divisor_Frecuencia_Completo');
gettext('Genera un pulso de reloj cada una cantidad dada de los del sistema.');
gettext('Corazon_2Hz_P');
gettext('Genera 2 pulsos por segundo');
gettext('Divisor_Frecuencia_Sin_Reset');
gettext('Genera un pulso de reloj cada una cantidad dada de los del sistema.');
gettext('Corazon_1Hz_P');
gettext('Genera 1 pulso por segundo');
gettext('Divisor_Frecuencia_Sin_Reset_y_Enable');
gettext('Genera un pulso de reloj cada una cantidad dada de los del sistema.');
gettext('Aritmetica');
gettext('Comparadores');
gettext('Comparador_4');
gettext('Comparador de magnitudes de 4 bits. ');
gettext('Comparador_8');
gettext('Comparador de magnitudes de 8 bits. ');
gettext('Comparador_igual_K_4');
gettext('Compara si la entrada es igual a una constante (4 bits)');
gettext('Comparador_igual_K_8');
gettext('Compara si la entrada es igual a una constante (8 bits)');
gettext('Didáctico');
gettext('Comparador_2_igual_didáctico');
gettext('Comparador de igualdad para 2 bits');
gettext('Los dos valores serán iguales cuando A1=B1 y A0=B0.\nPara determinar si A1=B1 basta con usar una XNOR.\nLa XOR es 1 cuando alguna de sus entradas es 1, pero no ambas a la vez.\nPor lo que una XOR nos dice si sus entradas son distintas.\nAl negarla sabremos si sus entradas son iguales.');
gettext('AmayorB_mapaK');
gettext('Mapa de Karnaugh para A>B (2 bits)');
gettext('<style>\ntable, th, td {\n    border: 2px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\ntd {\n  text-align: center;\n  vertical-align: middle;\n}\n</style>\n\n  Los mapas de Karnaugh son una forma manual de simplificar \nfunciones lógicas.\n  Este mapa muestra las ecuaciones lógicas para la comparación\nde A&gt;B con magnitudes de 2 bits.\n  La Tabla de verdad para esta ecuación es:\n\n<table border=\"1\" cellpadding=\"3\" align=\"center\">\n<tr><th>A1</th><th>A0</th><th>B1</th><th>B0</th><th>A&gt;B</th></tr>\n<tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>\n<tr><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr>\n<tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr>\n<tr><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr>\n<tr><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr>\n<tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr>\n<tr><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td></tr>\n<tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr>\n<tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr>\n<tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr>\n<tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr>\n<tr><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr>\n<tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr>\n<tr><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr>\n<tr><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td></tr>\n<tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr>\n</table>');
gettext('Comparador_2_didáctico');
gettext('Comparador de magnitudes de 2 bits didáctico');
gettext('Existen <b>6</b> tipos de comparaciones: &gt;, &lt;, =, &le;, &ge; y &ne;.\nLas últimas 3 son las inversas de las 3 primeras, por ejemplo: lo inverso de &gt; es &le;.\nPor lo que un comparador genérico solo necesita computar las <b>3</b> primeras.\n\nOtro detalle importante es que conocidas <b>2</b> de ellas la tercera se puede calcular como la NOR.\nPor ejemplo: será &lt; si no es &gt; o = [no (&gt; o =)]\n\nPor lo tanto en un comparador genérico basta con determinar &gt; e =.');
gettext('Comparador_4_didáctico');
gettext('Comparador de magnitudes de 4 bits didáctico');
gettext('  Para hacer un comparador de 4 bits podríamos aplicar la misma técnica usada para el de 3 bits,\nes decir, usar tres comparadores de 2 bits en cascada.\n  Sin embargo cuando el número de entradas es par podemos optar por una conexión en árbol.\n  Esta conexión requiere la misma cantidad de comparadores, pero tiene menor profundidad lógica. \nEs decir que el camino más largo entre entradas y salidas es más corto que en caso de la conexión\nen cascada.\n  El comparador <b>1</b> se encarga de los bits menos pesados, y por eso se conecta a los menos\npesados de <b>3</b>.\n  Análogamente el <b>2</b> se encarga de los bits más pesados, y por eso se conecta a los más\npesados de <b>3</b>.\n  ');
gettext('<h1>1</h1>');
gettext('<h1>2</h1>');
gettext('<h1>3</h1>');
gettext('Comparador_3_didáctico');
gettext('Comparador de magnitudes de 3 bits didáctico');
gettext('  Para expandir un comparador de 2 bits a 3 bits basta con colocar un segundo comparador\nen cascada.\n  Si el bit más pesado de A y B alcanza para decidir si es &gt; o &lt; el segundo comparador\npodrá resolver el resultado con sus bits A1 y B1.\n  En el caso en que A1 y B1 sean iguales la decisión quedará en manos de A0 y B0. Estas \nentradas están conectadas al primer comparador, quien resuelve la comparación de los bits\nmenos pesados de la entrada.\n  En líneas generales, para comparar N bits basta con N-1 comparadores de 2 bits en cascada.');
gettext('Comparador_2_mayor_didáctico');
gettext('Comparador de A mayor que B para 2 bits');
gettext('  La comparación de A>B puede resolverse planteando la tabla de verdad y\nluego simplificando por el método de Karnaugh.\n  Ingresando al bloque del mapa de Karnaugh se puede ver la tabla de verdad.\n  Lo que nos dicen las ecuaciones es que A>B cuando se cumple alguno de los\nsiguientes casos:\n1) A1 es 1 y B1 es 0\n2) A0 es 1 y B=0\n3) A=11 y B no es 11 (B0=1)\n  ');
gettext('Comparador_32');
gettext('Comparador de magnitudes de 32 bits. ');
gettext('Comparador_igual_8');
gettext('Comparador de igualdad de 8 bits ');
gettext('Comparador_16');
gettext('Comparador de magnitudes de 16 bits. ');
gettext('Comparador_igual_2');
gettext('Comparador de igualdad de 2 bits ');
gettext('Comparador_igual_4');
gettext('Comparador de igualdad de 4 bits ');
gettext('Comparador_2');
gettext('Comparador de magnitudes de 2 bits. ');
gettext('Comparador_igual_K_2');
gettext('Compara si la entrada es igual a una constante (2 bits)');
gettext('Comparador_igual_32');
gettext('Comparador de igualdad de 32 bits ');
gettext('Comparador_igual_K_32');
gettext('Compara si la entrada es igual a una constante (32 bits)');
gettext('Comparador_igual_16');
gettext('Comparador de igualdad de 16 bits ');
gettext('Comparador_igual_K_16');
gettext('Compara si la entrada es igual a una constante (16 bits)');
gettext('Sumadores');
gettext('Simple');
gettext('Sumador_Simple_2');
gettext('Sumador de 2 bits (solo cout)');
gettext('Sumador_Simple_32');
gettext('Sumador de 32 bits (solo cout)');
gettext('Sumador_Simple_8');
gettext('Sumador de 8 bits (solo cout)');
gettext('Sumador_Simple_16');
gettext('Sumador de 16 bits (solo cout)');
gettext('Sumador_Simple_4');
gettext('Sumador de 4 bits (solo cout)');
gettext('Didáctico');
gettext('Medio_Sumador');
gettext('Sumador de 1 bit con acarreo de salida, pero no de entrada');
gettext('Medio sumador:\nEs la celda básica de la suma.\nS es la suma de A y B, pero módulo 2 (0 o 1)\nCy es el acarreo');
gettext('La XOR es la suma módulo 2 de\nsus entradas. 1+1=2 => 0');
gettext('Hay acarreo cuando A y B son 1');
gettext('Se lo llama \"medio sumador\" porque necesitamos dos de\nellos para un sumador completo (con acarreo de entrada)');
gettext('Tabla de verdad\nA B  Suma Acarreo\n0 0    0     0\n0 1    1     0\n1 0    1     0\n1 1    0     1    <= 1+1=2, es decir 10 en binario\n                     me quedo con el 0 y acarreo 1');
gettext('Sumador_2_bits');
gettext('Sumador de 2 valores de 2 bits con acarreo de entrada y salida.');
gettext('Este sumador se \nencarga del \nbit más pesado');
gettext('Este sumador se \nencarga del \nbit menos pesado');
gettext('Sumador de 2 bits:\nSe construye a partir de dos sumadores completos.\nPrimero sumamos los bits menos pesados, al igual que como hacemos manualmente (sumamos las unidades),\nluego sumamos los más pesados, junto con el posible acarreo de la etapa anterior.');
gettext('Sumador_8_bits');
gettext('Sumador de dos valores de 4 bits con acarreo de entrada y salida');
gettext('Sumador de 8 bits:\nSe construye a partir de dos sumadores de 4 bits.\nPrimero sumamos los bits menos pesados, al igual que como hacemos manualmente (sumamos las unidades),\nluego sumamos los más pesados, junto con el posible acarreo de la etapa anterior.');
gettext('Este sumador se \nencarga de los 4\nbits más pesados');
gettext('Este sumador se \nencarga de los 4 \nbits menos pesados');
gettext('Sumador_Completo');
gettext('Sumador de 1 bit con acarreo de entrada y salida');
gettext('Sumador completo:\nSe construye a partir de dos \"medio sumadores\".\nS es la suma de A, B y el acarreo de la etapa anterior.\nCout es 1 cuando cualquiera de las dos sumas parciales generó acarreo.\n');
gettext('S es la suma módulo 2 de las 3 entradas\nSe computa como la XOR de las 3.');
gettext('Hay acarreo cuando el resultado es 2 o más.\nEsto es cuando cualquiera de las sumas \nparciales dió 2 o más y por lo tanto generó\nacarreo.');
gettext('Tabla de verdad:\nA B Cin  Suma Acarreo\n0 0 0      0     0\n0 0 1      1     0\n0 1 0      1     0\n0 1 1      0     1\n1 0 0      1     0\n1 0 1      0     1\n1 1 0      0     1\n1 1 1      1     1');
gettext('Sumador_4_bits');
gettext('Sumador de dos valores de 4 bits con acarreo de entrada y salida');
gettext('Sumador de 4 bits:\nSe construye a partir de dos sumadores de 2 bits.\nPrimero sumamos los bits menos pesados, al igual que como hacemos manualmente (sumamos las unidades),\nluego sumamos los más pesados, junto con el posible acarreo de la etapa anterior.');
gettext('Este sumador se \nencarga de los 2\nbits más pesados');
gettext('Este sumador se \nencarga de los 2 \nbits menos pesados');
gettext('Completo');
gettext('Sumador_Completo_2');
gettext('Sumador de 2 bits (cin, cout y oVerflow)');
gettext('Sumador_Completo_4');
gettext('Sumador de 4 bits (cin, cout y oVerflow)');
gettext('Sumador_Completo_8');
gettext('Sumador de 8 bits (cin, cout y oVerflow)');
gettext('Sumador_Completo_32');
gettext('Sumador de 32 bits (cin, cout y oVerflow)');
gettext('Sumador_Completo_16');
gettext('Sumador de 16 bits (cin, cout y oVerflow)');
gettext('Restadores');
gettext('Simple');
gettext('Restador_Simple_16');
gettext('Restador de 16 bits (solo bout)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Simple_32');
gettext('Restador de 32 bits (solo bout)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Simple_2');
gettext('Restador de 2 bits (solo bout)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Simple_8');
gettext('Restador de 8 bits (solo bout)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Simple_4');
gettext('Restador de 4 bits (solo bout)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Completo');
gettext('Restador_Completo_4');
gettext('Restador de 4 bits (bin, bout y oVerflow)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Completo_8');
gettext('Restador de 8 bits (bin, bout y oVerflow)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Completo_32');
gettext('Restador de 32 bits (bin, bout y oVerflow)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Completo_2');
gettext('Restador de 2 bits (bin, bout y oVerflow)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Restador_Completo_16');
gettext('Restador de 16 bits (bin, bout y oVerflow)');
gettext('La resta puede implementarse como suma de A y el Ca2 de B.\nEsto es porque usamos aritmética modular, donde:\nA+Ca2(B)=A+2^N-B=A-B\n2^N es precisamente el módulo del binario de N bits. \nPor lo que al aplicar módulo 2^N a A+2^N-B obtenemos A-B.');
gettext('Complemento_a_2');
gettext('Complemento_a_2_32');
gettext('Calcula el complemento a 2 de la entrada');
gettext('Es el complemento a la \"base\"\nMatemáticamente se calcula como 2^N-V\nDonde N es el número de bits.\nEl complemento a 2 es el complemento a 1 más 1.\n\n');
gettext('Complemento_a_2_16');
gettext('Calcula el complemento a 2 de la entrada');
gettext('Es el complemento a la \"base\"\nMatemáticamente se calcula como 2^N-V\nDonde N es el número de bits.\nEl complemento a 2 es el complemento a 1 más 1.\n\n');
gettext('Complemento_a_2_4');
gettext('Calcula el complemento a 2 de la entrada');
gettext('Es el complemento a la \"base\"\nMatemáticamente se calcula como 2^N-V\nDonde N es el número de bits.\nEl complemento a 2 es el complemento a 1 más 1.\n\n');
gettext('Complemento_a_2_8');
gettext('Calcula el complemento a 2 de la entrada');
gettext('Es el complemento a la \"base\"\nMatemáticamente se calcula como 2^N-V\nDonde N es el número de bits.\nEl complemento a 2 es el complemento a 1 más 1.\n\n');
gettext('Complemento_a_2_2');
gettext('Calcula el complemento a 2 de la entrada');
gettext('Es el complemento a la \"base\"\nMatemáticamente se calcula como 2^N-V\nDonde N es el número de bits.\nEl complemento a 2 es el complemento a 1 más 1.\n\n');
gettext('Complemento_a_1');
gettext('Complemento_a_1_16');
gettext('Calcula el complemento a 1 de la entrada');
gettext('El complemento a 1 es equivalente a negar todos\nlos bits.\nMatemáticamente se calcula como 2^N-1-V\nDonde N es el número de bits.\nEs el complemento a la \"base menos 1\"');
gettext('Complemento_a_1_8');
gettext('Calcula el complemento a 1 de la entrada');
gettext('El complemento a 1 es equivalente a negar todos\nlos bits.\nMatemáticamente se calcula como 2^N-1-V\nDonde N es el número de bits.\nEs el complemento a la \"base menos 1\"');
gettext('Complemento_a_1_32');
gettext('Calcula el complemento a 1 de la entrada');
gettext('El complemento a 1 es equivalente a negar todos\nlos bits.\nMatemáticamente se calcula como 2^N-1-V\nDonde N es el número de bits.\nEs el complemento a la \"base menos 1\"');
gettext('Complemento_a_1_4');
gettext('Calcula el complemento a 1 de la entrada');
gettext('El complemento a 1 es equivalente a negar todos\nlos bits.\nMatemáticamente se calcula como 2^N-1-V\nDonde N es el número de bits.\nEs el complemento a la \"base menos 1\"');
gettext('Complemento_a_1_2');
gettext('Calcula el complemento a 1 de la entrada');
gettext('El complemento a 1 es equivalente a negar todos\nlos bits.\nMatemáticamente se calcula como 2^N-1-V\nDonde N es el número de bits.\nEs el complemento a la \"base menos 1\"');
gettext('Extender');
gettext('Extender_8_32');
gettext('Extiende un bus de 8 bits a 32 bits manteniendo el signo (Ca2)');
gettext('Extender_1_8');
gettext('Extiende un bus de 1 bits a 8 bits manteniendo el signo (Ca2)');
gettext('Extender_1_16');
gettext('Extiende un bus de 1 bits a 16 bits manteniendo el signo (Ca2)');
gettext('Extender_1_2');
gettext('Extiende un bus de 1 bits a 2 bits manteniendo el signo (Ca2)');
gettext('Extender_2_32');
gettext('Extiende un bus de 2 bits a 32 bits manteniendo el signo (Ca2)');
gettext('Extender_4_16');
gettext('Extiende un bus de 4 bits a 16 bits manteniendo el signo (Ca2)');
gettext('Extender_1_4');
gettext('Extiende un bus de 1 bits a 4 bits manteniendo el signo (Ca2)');
gettext('Extender_8_16');
gettext('Extiende un bus de 8 bits a 16 bits manteniendo el signo (Ca2)');
gettext('Extender_1_32');
gettext('Extiende un bus de 1 bits a 32 bits manteniendo el signo (Ca2)');
gettext('Extender_16_32');
gettext('Extiende un bus de 16 bits a 32 bits manteniendo el signo (Ca2)');
gettext('Extender_2_4');
gettext('Extiende un bus de 2 bits a 4 bits manteniendo el signo (Ca2)');
gettext('Extender_2_8');
gettext('Extiende un bus de 2 bits a 8 bits manteniendo el signo (Ca2)');
gettext('Extender_4_8');
gettext('Extiende un bus de 4 bits a 8 bits manteniendo el signo (Ca2)');
gettext('Extender_4_32');
gettext('Extiende un bus de 4 bits a 32 bits manteniendo el signo (Ca2)');
gettext('Extender_2_16');
gettext('Extiende un bus de 2 bits a 16 bits manteniendo el signo (Ca2)');
gettext('Incrementador');
gettext('Incrementador_Simple_2');
gettext('Suma 1 a la entrada');
gettext('Incrementador_8');
gettext('Suma 1 a la entrada');
gettext('Incrementador_Simple_8');
gettext('Suma 1 a la entrada');
gettext('Incrementador_16');
gettext('Suma 1 a la entrada');
gettext('Incrementador_Simple_16');
gettext('Suma 1 a la entrada');
gettext('Incrementador_4');
gettext('Suma 1 a la entrada');
gettext('Incrementador_Simple_32');
gettext('Suma 1 a la entrada');
gettext('Incrementador_2');
gettext('Suma 1 a la entrada');
gettext('Incrementador_Simple_4');
gettext('Suma 1 a la entrada');
gettext('Incrementador_32');
gettext('Suma 1 a la entrada');
gettext('Bombeo');
gettext('Corazon_x1');
gettext('Generacion de una señal cuadrada de 1Hz (1 pulso/segundo)');
gettext('Generador de señales cuadradas de 1 Hz\n\nSe usa un corazón de pulsos de 2 Hz y se pasa por un biestable T\nque divide la frecuencia entre 2, obteniéndose una señal de 1 Hz\ny un ciclo de trabajo del 50% (la mitad del tiempo a 0, la otra \nmitad a 1)');
gettext('Biestables');
gettext('Chincheta-D-parametric');
gettext('Biestable D con inicialización paramétrica');
gettext('Chincheta-D-1');
gettext('Biestable D inicializado a 0');
gettext('Chincheta-T-ena-0');
gettext('Biestable tipo T');
gettext('Chincheta-T-1');
gettext('Biestable tipo T inicializado a 1');
gettext('Flip-flop T');
gettext('Flip-flop T Simple 1');
gettext('Flip-flop T con valor inicial 1');
gettext('Flip-flop T Simple DINI');
gettext('Flip-flop T con valor inicial');
gettext('Flip-flop T Ena Rst');
gettext('Flip-flop T con entradas de enable, reset y valor inicial');
gettext('Flip-flop T Completo');
gettext('Flip-flop T con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop T Simple 0');
gettext('Flip-flop T con valor inicial 0');
gettext('Chincheta-D-0');
gettext('Biestable D inicializado a 0');
gettext('Chincheta-T-sync-0');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Chincheta-T-0');
gettext('Biestable tipo T');
gettext('Chincheta-D-ena-parametric');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Chincheta-D-0-set-rst');
gettext('Biestable D con entradas de reset y set síncronas, inicializado a 0');
gettext('Flip-flop RS');
gettext('Flip-flop RS Simple 1');
gettext('Flip-flop RS con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop RS Ena Rst');
gettext('Flip-flop RS con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop RS Simple INI');
gettext('Flip-flop RS con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop RS Simple 0');
gettext('Flip-flop RS con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop RS Completo');
gettext('Flip-flop RS con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop D');
gettext('Flip-flop D Simple 1');
gettext('Flip-flop D con valor inicial 1');
gettext('Flip-flop D Completo');
gettext('Flip-flop D con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop D Simple DINI');
gettext('Flip-flop D con valor inicial');
gettext('Flip-flop D Simple 0');
gettext('Flip-flop D con valor inicial 0');
gettext('Flip-flop D Ena Rst');
gettext('Flip-flop D con entradas de enable, reset y valor inicial');
gettext('Chincheta-D-ena-0');
gettext('Biestable D con enable inicializado a 0');
gettext('Flip-flop JK');
gettext('Flip-flop JK Simple INI');
gettext('Flip-flop JK con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop JK Simple 1');
gettext('Flip-flop JK con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop JK Completo');
gettext('Flip-flop JK con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop JK Simple 0');
gettext('Flip-flop JK con entradas de fuerza, enable, reset y valor inicial');
gettext('Flip-flop JK Ena Rst');
gettext('Flip-flop JK con entradas de fuerza, enable, reset y valor inicial');
gettext('Chincheta-T-sync-ini');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Chincheta-T-sync-1');
gettext('Biestable T síncrono, inicializado a 1');
gettext('3. Desplazamiento');
gettext('08. Desplazamiento Izquierda Simple');
gettext('Ejemplo de uso de un registro de desplazamiento a izquierda');
gettext('USO ASINCRÓNICO\nNO RECOMENDABLE');
gettext('04. Desplazamiento Derecha ENA-RST');
gettext('Ejemplo de uso de un registro de desplazamiento a derecha');
gettext('07. Desplazamiento Izquierda ENA-RST');
gettext('Ejemplo de uso de un registro de desplazamiento a izquierda');
gettext('02. Desplazamiento Universal Simple');
gettext('Ejemplo de uso de un registro de desplazamiento a derecha');
gettext('05. Desplazamiento Derecha Simple');
gettext('Ejemplo de uso de un registro de desplazamiento a derecha');
gettext('USO ASINCRÓNICO\nNO RECOMENDABLE');
gettext('06. Desplazamiento Izquierda Completo');
gettext('Ejemplo de uso de un registro de desplazamiento a izquierda');
gettext('01. Desplazamiento Universal Completo');
gettext('Ejemplo de uso de un registro de desplazamiento a derecha');
gettext('03. Desplazamiento Derecha Completo');
gettext('Ejemplo de uso de un registro de desplazamiento a derecha');
gettext('2. Counters');
gettext('02. BCD Counter 2');
gettext('03. BCD Down Counter');
gettext('05. BCD Counter fast');
gettext('04. BCD Down Counter 2');
gettext('01. BCD Counter');
gettext('4. Combinacional Misc');
gettext('06. Four LEDs sequence deco no ena');
gettext('LEDs 4 to 1 are turned on in sequence');
gettext('02. Four LEDs sequence demux');
gettext('LEDs 4 to 1 are turned on in sequence');
gettext('03. Two LEDs alternate blink deco');
gettext('LEDs 1 and 2 are blinking alternatively');
gettext('07. Codificador 4 a 2');
gettext('Accionar 1 o más botones\nEl BTN1 tiene más prioridad que los 2, 3 y 4\nEl BTN2 que los 3 y 4\nEl BTN3 que el 4');
gettext('  Este ejemplo muestra en los LEDs 2, 3 y 4 el número de botón presionado.\n  El LED2 es el más significativo y el LED4 el menos significativo.\n  Como los botones se numeran desde el 1 necesitamos sumarle 1 a la salida del codificador.\n  La salida G (grupo) del codificador permite distinguir el caso en que todas las entradas son 0, \ndel caso en que la entrada I0 es 1. Por eso actúa como condicionadora de las salidas del incrementador');
gettext('El acarreo es el <b>bit 2</b> del\nresultado.');
gettext('<H1><b>Bit 2</b></H1>');
gettext('<H1><b>Bit 0</b></H1>');
gettext('<H1><b>Bit 1</b></H1>');
gettext('04. Four LEDs sequence deco');
gettext('LEDs 4 to 1 are turned on in sequence');
gettext('01. Two LEDs alternate blink deco');
gettext('LEDs 1 and 2 are blinking alternatively');
gettext('05. Two LEDs alternate blink deco no ena');
gettext('LEDs 1 and 2 are blinking alternatively');
gettext('1. Basic');
gettext('07. CapSense toggle and LEDs');
gettext('Estos son los 4 sensores\ncapacitivos que están \njunto a los LEDs');
gettext('Estos son los 4 LEDs');
gettext('Esta constante controla si\nlos sensores reflejan su estado\nen forma directa o cambian con \ncada toque.');
gettext('05. Two LEDs alternate blink');
gettext('LEDs 1 and 2 are blinking alternatively');
gettext('08. AND 1 to all');
gettext('En este ejemplo el botón 1 condiciona el valor\nmostrado en los LEDs.\nCuando no está presionado el valor mostrado en\nlos LEDs es la constante C.\nCuando lo presionamos se apagan todos los LEDs.');
gettext('02. Two LEDs');
gettext('Turn on two LEDs');
gettext('Esta es una variante\npara el 1 lógico');
gettext('09. OR 1 to all');
gettext('En este ejemplo el botón 1 condiciona el valor\nmostrado en los LEDs.\nCuando no está presionado el valor mostrado en\nlos LEDs es la constante C.\nCuando lo presionamos se encienden todos los LEDs.');
gettext('01. One LED');
gettext('Encender LED1');
gettext('06. CapSense and LEDs');
gettext('Estos son los 4 sensores\ncapacitivos que están \njunto a los LEDs');
gettext('Estos son los 4 LEDs');
gettext('03. Three LEDs');
gettext('Turn on three LEDs');
gettext('10. XOR 1 to all');
gettext('En este ejemplo el botón 1 condiciona el valor\nmostrado en los LEDs.\nCuando no está presionado el valor mostrado en\nlos LEDs es la constante C.\nCuando lo presionamos se invierten todos los LEDs.\nLa XOR actúa como un inversor controlado.');
gettext('04. Two LED blink');
gettext('Blinking LED');
gettext('Otra forma de hacerlo');
gettext('5. Aritmetica');
gettext('03. Sumador');
gettext('Ingresar aquí el valor\nde A, 2 bits (magnitud o\nentero)');
gettext('Ingresar B, 2 bits\n');
gettext('Resultado de A+B');
gettext('Indicación de desborde\nSolo útil para enteros\nrepresentados en \ncomplemento a 2');
gettext('Indicación de acarreo\nSolo útila para \nmagnitudes');
gettext('04. Sumador Simple');
gettext('Ingresar aquí el valor\nde A, 2 bits (magnitud o\nentero)');
gettext('Ingresar B, 2 bits\n');
gettext('Resultado de A+B');
gettext('Indicación de acarreo\nSolo útila para \nmagnitudes');
gettext('05. Complemento a 1');
gettext('Ingresar aquí el valor\na compementar, 4 bits');
gettext('06. Incrementador');
gettext('Ingresar aquí el valor\na compementar, 4 bits');
gettext('09. Restador simple');
gettext('Ingresar aquí el valor\nde A, 2 bits (magnitud o\nentero)');
gettext('Ingresar B, 2 bits\n');
gettext('Resultado de A-B');
gettext('Indicación de borrow\nSolo útila para \nmagnitudes');
gettext('02. Comparar >=,!=,<=');
gettext('Ingresar aquí el valor\nde A, se compara con B.');
gettext('En B ingresamos la \nreferencia.');
gettext('LED que indica que A≤B');
gettext('LED que indica que A≥B');
gettext('LED que indica que A≠B');
gettext('08. Restador');
gettext('Ingresar aquí el valor\nde A, 2 bits (magnitud o\nentero)');
gettext('Ingresar B, 2 bits\n');
gettext('Resultado de A-B');
gettext('Indicación de desborde\nSolo útil para enteros\nrepresentados en \ncomplemento a 2');
gettext('Indicación de borrow\nSolo útila para \nmagnitudes');
gettext('01. Comparar >,=,<');
gettext('Ingresar aquí el valor\nde A, se compara con B.');
gettext('En B ingresamos la \nreferencia.');
gettext('LED que indica que A>B');
gettext('LED que indica que A&lt;B');
gettext('LED que indica que A=B');
gettext('10. Sumador didáctico');
gettext('Ingresar aquí el valor\nde A, 4 bits (magnitud o\nentero)');
gettext('Ingresar B, 4 bits\n');
gettext('11. Comparar >,=,< didáctico');
gettext('Ingresar aquí el valor\nde A, se compara con B.');
gettext('En B ingresamos la \nreferencia.');
gettext('LED que indica que A>B');
gettext('LED que indica que A&lt;B');
gettext('LED que indica que A=B');
gettext('07. Complemento a 2');
gettext('Ingresar aquí el valor\na compementar, 4 bits');
gettext('12. Extensión de signo');
gettext('Ingresar un valor entero (Ca2) de 2 bits (-2,-1,0 o 1)\nEl 0 y 1 completan con dos 0s\nEl -1 y el -2 con dos 1s\nDe esta manera el valor de 4 bits sigue representando\nel mismo valor que el de 2 bits.');
gettext('6. Comunicación');
gettext('04. Teclado PS2');
gettext('02. Recepción Serie');
gettext('  Este registro captura el valor recibido.\n  No hay garantía que el mismo permanezca\nsin cambios, por lo que siempre es \nnecesario capturarlo.');
gettext('  Este multiplexor elige que vemos\nen los LEDs:\n<ul><li><b>Botón 4 o nada</b>: los 4 bits más pesados \nrecibidos</li><li><b>Botón 3</b>: los 4 bits menos pesados \nrecibidos</li><li><b>Botón 2</b>: sin usar, todo 0</li><li><b>Botón 1</b>:<ul><li>LED4 cambia con cada recepción</li><li>LED2 DTR</li><li>LED1 RTS</li></ul></li></ul>');
gettext('Los botones 3 y 4 controlan\nCTS y DSR');
gettext('El botón 1 genera el código 11 ya\nque está conectado a i3.\nAsí el 4 genera el código 0.');
gettext('07. Teclado PS2 y LEDs 3');
gettext('06. Teclado PS2 y LEDs 2');
gettext('03. Recepción PS2');
gettext('Modulo lector de un teclado PS/2. Devuelve todos los codigos recibidos al pulsar una tecla. Emite un pulso para indicar que se ha recibido un dato');
gettext('Prueba de lectura del teclado PS/2\nControlador de bajo nivel: todos los datos \nrecibidos se muestran por los leds');
gettext('Es necesario registrar\nel valor cuando la señal\nde rdy lo indica.');
gettext('Sólo enviamos\npor RS-232 los\nque no tengan\nerror.');
gettext('Las señales DBG_*\nson de depuración.');
gettext('01. Transmisión Serie');
gettext('De la A a la Z más\nuno.');
gettext('Cuando está en cuenta\nterminal (Z+1) envía\nun avance de línea (10)');
gettext('El botón 1 inicia una ráfaga de transmisión del abecedario.\nLos botones 2 y 3 controlan las señales CTS y DSR del modem.\nEl LED1 indica que el transmisor está listo (se apaga al presionar el botón 1).\nLas señales DTR y RTS del modem se indican en los LEDs 4 y 3.');
gettext('05. Teclado PS2 y LEDs');
